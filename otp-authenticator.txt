-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | OTP Authenticator (a la google) command line client
--   
--   Simple tool for keeping track of your one-time pad two-factor
--   authentication keys; basically a command-line version of the canonical
--   <a>google authenticator app</a>.
--   
--   The library uses GnuPG (through <i>h-gpgme</i>) to safely encrypt your
--   secret keys. The first time you use it, it asks for a fingerprint to
--   use for encryption. Currently <i>GnuPG 1.x</i> has some issues with
--   <i>h-gpgme</i> when asking for keys, so <i>GPG 2.x</i> is recommended.
--   Keys are stored, encrypted, at `~/.otp-auth.vault` by default.
@package otp-authenticator
@version 0.1.1.0


-- | Common utility functions and values used throughout the library.
module Authenticator.Common

-- | Default settings for haskeline.
hlSettings :: forall m. MonadIO m => Settings m

-- | Pad and decode a base32-encoded value from its <tt>Text</tt>
--   prepresentation.
decodePad :: Text -> Maybe ByteString


-- | Load options for the <tt>otp-auth</tt> executable.
module Authenticator.Options

-- | A command to exercute. See <a>Authenticator.Actions</a>.
data Cmd
Add :: Bool -> Cmd
View :: Bool -> Either Int (Maybe Text, Maybe Text) -> Cmd
Gen :: Int -> Cmd
Edit :: Int -> Cmd
Delete :: Int -> Cmd
Dump :: DumpType -> Cmd

-- | Should the data dump be yaml, or json?
data DumpType
DTYaml :: DumpType
DTJSON :: DumpType

-- | Return command, visible password entry, vault filepath, and
--   fingerprint
getOptions :: IO (Cmd, Bool, FilePath, Maybe Fpr)
instance GHC.Generics.Generic Authenticator.Options.Config
instance Data.Aeson.Types.FromJSON.FromJSON Authenticator.Options.Config
instance Data.Aeson.Types.ToJSON.ToJSON Authenticator.Options.Config


-- | Types for storing, serializing, accessing OTP keys. Gratuitous
--   type-level programming here for no reason because I have issues.
--   
--   Based off of <a>https://github.com/google/google-authenticator</a>.
module Authenticator.Vault

-- | OTP generation mode
data Mode

-- | Counter-based
HOTP :: Mode

-- | Time-based
TOTP :: Mode

-- | Singleton for <a>Mode</a>
data SMode :: Mode -> Type
[SHOTP] :: SMode  'HOTP
[STOTP] :: SMode  'TOTP

-- | Reify a <a>Mode</a> to its singleton
withSMode :: Mode -> (forall m. SMode m -> r) -> r

-- | Reflect a <a>SMode</a> to its value.
fromSMode :: SMode m -> Mode

-- | Which OTP-approved hash algorithm to use?
data HashAlgo
HASHA1 :: HashAlgo
HASHA256 :: HashAlgo
HASHA512 :: HashAlgo

-- | Parse a hash algorithm string into the appropriate <a>HashAlgo</a>.
parseAlgo :: String -> Maybe HashAlgo

-- | A standards-compliant secret key type. Well, almost. It doesn't
--   include configuration for the time period if it's time-based.
data Secret :: Mode -> Type
[Sec] :: {secAccount :: Text, secIssuer :: Maybe Text, secAlgo :: HashAlgo, secDigits :: OTPDigits, secKey :: ByteString} -> Secret m

-- | Newtype wrapper to provide <a>Eq</a>, <a>Ord</a>, <a>Binary</a>, and
--   <a>ToJSON</a> instances. You can convert to and from this and the
--   <a>Int</a> representation using <a>OTPDigitsInt</a>
newtype OTPDigits
OTPDigits :: OTPDigits -> OTPDigits
[otpDigits] :: OTPDigits -> OTPDigits
pattern OTPDigitsInt :: OTPDigits -> Int

-- | A data family consisting of the state required by each mode.
data family ModeState :: Mode -> Type

-- | A <a>Secret</a> coupled with its <a>ModeState</a>, existentially
--   quantified over its <a>Mode</a>.
type SomeSecretState = DSum SMode (Secret :*: ModeState)

-- | A list of secrets and their states, of various modes.
newtype Vault
Vault :: [SomeSecretState] -> Vault
[vaultList] :: Vault -> [SomeSecretState]

-- | A lens into the list of <a>SomeSecretState</a>s in a <a>Vault</a>.
--   Should be an Iso but we don't want a lens dependency now, do we.
_Vault :: Functor f => ([SomeSecretState] -> f [SomeSecretState]) -> Vault -> f Vault

-- | Generate an HTOP (counter-based) code, returning a modified state.
hotp :: Secret  'HOTP -> ModeState  'HOTP -> (Text, ModeState  'HOTP)

-- | Generate a TOTP (time-based) code in IO for the current time.
totp :: Secret  'TOTP -> IO Text

-- | (Purely) generate a TOTP (time-based) code, for a given time.
totp_ :: Secret  'TOTP -> POSIXTime -> Text

-- | Abstract over both <a>hotp</a> and <a>totp</a>.
otp :: SMode m -> Secret m -> ModeState m -> IO (Text, ModeState m)

-- | Some sort of RankN lens and traversal over a <tt>SomeSecret</tt>.
--   Allows you to traverse (effectfully map) over the <a>ModeState</a> in
--   a <a>SomeSecretState</a>, with access to the <a>Secret</a> as well.
--   
--   With this you can implement getters and setters. It's also used by the
--   library to update the <a>ModeState</a> in IO.
someSecret :: Functor f => (forall m. SMode m -> Secret m -> ModeState m -> f (ModeState m)) -> SomeSecretState -> f SomeSecretState

-- | A RankN traversal over all of the <a>Secret</a>s and <a>ModeState</a>s
--   in a <a>Vault</a>.
vaultSecrets :: Applicative f => (forall m. SMode m -> Secret m -> ModeState m -> f (ModeState m)) -> Vault -> f Vault

-- | Print out the metadata (account name and issuer) of a <a>Secret</a>.
describeSecret :: Secret m -> Text

-- | A parser for a otpauth URI.
secretURI :: Parser SomeSecretState

-- | Parse a valid otpauth URI and initialize its state.
--   
--   See
--   <a>https://github.com/google/google-authenticator/wiki/Key-Uri-Format</a>
parseSecretURI :: String -> Either String SomeSecretState
instance GHC.Generics.Generic Authenticator.Vault.Vault
instance GHC.Show.Show (Authenticator.Vault.Secret a)
instance GHC.Generics.Generic (Authenticator.Vault.Secret a)
instance GHC.Show.Show Authenticator.Vault.OTPDigits
instance GHC.Show.Show Authenticator.Vault.HashAlgo
instance GHC.Generics.Generic Authenticator.Vault.HashAlgo
instance GHC.Show.Show Authenticator.Vault.Mode
instance GHC.Generics.Generic Authenticator.Vault.Mode
instance GHC.Show.Show (Authenticator.Vault.ModeState 'Authenticator.Vault.HOTP)
instance GHC.Generics.Generic (Authenticator.Vault.ModeState 'Authenticator.Vault.HOTP)
instance GHC.Show.Show (Authenticator.Vault.ModeState 'Authenticator.Vault.TOTP)
instance GHC.Generics.Generic (Authenticator.Vault.ModeState 'Authenticator.Vault.TOTP)
instance Data.Binary.Class.Binary Authenticator.Vault.Vault
instance Data.Aeson.Types.ToJSON.ToJSON Authenticator.Vault.Vault
instance Data.Binary.Class.Binary Authenticator.Vault.SomeSecretState
instance Data.Aeson.Types.ToJSON.ToJSON Authenticator.Vault.SomeSecretState
instance Data.Binary.Class.Binary (Authenticator.Vault.Secret m)
instance Data.Aeson.Types.ToJSON.ToJSON (Authenticator.Vault.Secret m)
instance GHC.Classes.Eq Authenticator.Vault.OTPDigits
instance GHC.Classes.Ord Authenticator.Vault.OTPDigits
instance Data.Binary.Class.Binary Authenticator.Vault.OTPDigits
instance Data.Aeson.Types.ToJSON.ToJSON Authenticator.Vault.OTPDigits
instance Data.Binary.Class.Binary Authenticator.Vault.HashAlgo
instance Data.Aeson.Types.ToJSON.ToJSON Authenticator.Vault.HashAlgo
instance Data.Binary.Class.Binary (Authenticator.Vault.ModeState 'Authenticator.Vault.HOTP)
instance Data.Binary.Class.Binary (Authenticator.Vault.ModeState 'Authenticator.Vault.TOTP)
instance Data.Aeson.Types.ToJSON.ToJSON (Authenticator.Vault.ModeState 'Authenticator.Vault.HOTP)
instance Data.Aeson.Types.ToJSON.ToJSON (Authenticator.Vault.ModeState 'Authenticator.Vault.TOTP)
instance Data.Binary.Class.Binary Authenticator.Vault.Mode
instance Data.Aeson.Types.ToJSON.ToJSON Authenticator.Vault.Mode


-- | Basic actions to manipulate <a>Vault</a>s. The <tt>otp-auth</tt>
--   executable is a thin wrapper over these actions.
--   
--   See <tt>Cmd</tt>.
module Authenticator.Actions

-- | View secrets, generating codes for time-based keys.
viewVault :: Bool -> Either Int (Maybe Text, Maybe Text) -> Vault -> IO ()

-- | Add a secret, interactively.
addSecret :: Bool -> Bool -> Vault -> IO Vault

-- | Generate a secret code, forcing a new HOTP code if it is
--   counter-based.
genSecret :: Int -> Vault -> IO (Maybe (String, Vault))

-- | Edit a secret's metadata (account name, issuer)
editSecret :: Int -> Vault -> IO Vault

-- | Delete a secret.
deleteSecret :: Int -> Vault -> IO Vault


-- | Basically provides <tt><a>Enc</a> a</tt>, which abstracts over an
--   encrypted <tt>a</tt>. Can only be read by invoking GnuPG in <a>IO</a>,
--   where the user needs to provide their key to decrypt.
--   
--   One main advantage is that an <tt><a>Enc</a> a</tt> can be seriealized
--   and deserialized using its <tt>Binary</tt> instance, providing
--   type-safe deserialization into encrypted values.
--   
--   Might be pulled out to an external package some day.
module Encrypted

-- | An <tt><a>Enc</a> a</tt> abstracts over a encrypted <tt>a</tt>.
--   
--   Has a useful <tt>Binary</tt> instance, which allows type-safe
--   deserialization into encrypted values.
data Enc a
Enc :: Encrypted -> Enc a
[encBytes] :: Enc a -> Encrypted

-- | Wrap a value into an <a>Enc</a>, using a given GnuPG key.
mkEnc :: Binary a => Ctx -> Key -> a -> IO (Enc a)

-- | Modify an encrypted value with a given <tt>a -&gt; IO a</tt> function,
--   re-encrypting it with the given GnuPG key. The decrypted value never
--   leaves the closure.
overEnc :: Binary a => Ctx -> Key -> Enc a -> (a -> IO a) -> IO (Enc a)

-- | Extract a value from an <a>Enc</a>, using a compatible key in the
--   GnuPG environment.
getEnc :: Binary a => Ctx -> Enc a -> IO a

-- | A variation of <a>overEnc</a> that allows the user to also return a
--   value produced from the decrypted value. Re-encrypts the changed value
--   using the given GnuPG key.
withEnc :: Binary a => Ctx -> Key -> Enc a -> (a -> IO (b, a)) -> IO (b, Enc a)
instance GHC.Generics.Generic (Encrypted.Enc a)
instance Data.Binary.Class.Binary (Encrypted.Enc a)
